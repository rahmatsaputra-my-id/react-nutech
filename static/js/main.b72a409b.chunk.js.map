{"version":3,"sources":["Component/CTable/index.js","Helper/ActionGlobal.js","App.js","reportWebVitals.js","index.js"],"names":["CTable","props","state","page","this","listAllData","title","data","columns","field","options","search","paging","filtering","actionsColumnIndex","addRowPosition","onChangePage","event","setState","editable","onRowAdd","newRow","Promise","resolve","reject","updatedRows","alert","setTimeout","allData","console","log","onRowDelete","selectedRow","index","tableData","id","splice","onRowUpdate","updatedRow","oldRow","Component","getAllData","fullName","email","subject","description","customerName","attachmentToken","a","baseUrl","axios","get","result","message","App","_handlerGetAllData","readAllData","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGqBA,E,kDAClB,WAAYC,GAAQ,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACVC,KAAM,GAJO,E,0CAQnB,WAAU,IAAD,OAyBEA,EAASC,KAAKF,MAAdC,KACAE,EAAgBD,KAAKH,MAArBI,YAER,OACG,8BACG,cAAC,IAAD,CACGC,MAAM,iBACNC,KAAMF,EACNG,QA/BO,CAMb,CACGF,MAAO,eACPG,MAAO,gBAEV,CACGH,MAAO,iBACPG,MAAO,kBAEV,CACGH,MAAO,gBACPG,MAAO,iBAEV,CACGH,MAAO,QACPG,MAAO,UAYJC,QAAS,CACNC,QAAQ,EACRC,QAAQ,EACRC,WAAW,EACXC,oBAAqB,EACrBC,eAAgB,SAEnBZ,KAAMA,EACNa,aACG,SAACC,EAAOd,GACL,EAAKe,SAAL,2BACM,EAAKhB,OADX,IAEGC,WAITgB,SAAU,CACPC,SAAU,SAACC,GAAD,OAAY,IAAIC,SAAQ,SAACC,EAASC,GACzC,IAAMC,EAAW,sBACXpB,GADW,CAEdgB,IAEHK,MAAM,oBACNC,YAAW,WACR,EAAKT,SAAS,CACXU,QAASH,IAEZF,MACA,KACHM,QAAQC,IAAI,WAAYT,OAE3BU,YAAa,SAAAC,GAAW,OAAI,IAAIV,SAAQ,SAACC,EAASC,GAC/C,IAAMS,EAAQD,EAAYE,UAAUC,GAC9BV,EAAW,YAAOpB,GACxBoB,EAAYW,OAAOH,EAAO,GAC1BN,YAAW,WACR,EAAKT,SAAS,CACXU,QAASH,IAEZF,MACA,KACHM,QAAQC,IAAI,cAAeL,OAE9BY,YAAa,SAACC,EAAYC,GAAb,OAAwB,IAAIjB,SAAQ,SAACC,EAASC,GACxD,IAAMS,EAAQM,EAAOL,UAAUC,GACzBV,EAAW,YAAOpB,GACxBoB,EAAYQ,GAASK,EACrBX,YAAW,WACR,EAAKT,SAAS,CACXU,QAASH,IAEZF,MACA,KACHM,QAAQC,IAAI,cAAeL,gB,GAhGZe,a,kBCAvBC,EAAU,uCAAG,WAAQC,EAAUC,EAAOC,EAASC,EAAaC,EAAcC,GAA7D,eAAAC,EAAA,4DACP,sCADO,SA4BTC,wDA5BS,SA6BAC,IAAMC,IADfF,yDA5BS,cA6BfG,EA7Be,yBA+BdA,GA/Bc,uCAkCrBvB,QAAQC,IAAI,2CAA4C,KAAMuB,SAlCzC,mBAmCd,GAnCc,yDAAH,gECEFC,E,kDACnB,WAAYrD,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACX0B,SAAS,GAJM,E,qDAQnB,WACExB,KAAKmD,uB,uEAGP,4BAAAP,EAAA,sEAC4BP,IAD5B,OACQe,EADR,OAEEpD,KAAKc,SAAS,CACZb,YAAamD,EAAYjD,KAAKA,OAEhCsB,QAAQC,IAAI,4BAA6B0B,EAAYjD,KAAKA,MAL5D,gD,0EAQA,WACE,IAAQF,EAAgBD,KAAKF,MAArBG,YAER,OACE,sBAAKoD,UAAU,MAAf,UACE,2EACA,cAAC,EAAD,CACEpD,YAAaA,W,GA5BUmC,aCOlBkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b72a409b.chunk.js","sourcesContent":["import MaterialTable from 'material-table';\nimport React, { Component } from 'react';\n\nexport default class CTable extends Component {\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         page: 0,\n      }\n   }\n\n   render() {\n\n      const columns = [\n         // {\n         //    title: 'ID',\n         //    field: 'id',\n         //    editable: false\n         // },\n         {\n            title: 'Product Name',\n            field: 'product_name'\n         },\n         {\n            title: 'Purchase Price',\n            field: 'purchase_price'\n         },\n         {\n            title: 'Selling Price',\n            field: 'selling_price'\n         },\n         {\n            title: 'Stocl',\n            field: 'stock'\n         }\n      ];\n      const { page } = this.state;\n      const { listAllData } = this.props;\n\n      return (\n         <div>\n            <MaterialTable\n               title=\"Material Table\"\n               data={listAllData}\n               columns={columns}\n               options={{\n                  search: true,\n                  paging: true,\n                  filtering: false,\n                  actionsColumnIndex: -1,\n                  addRowPosition: 'first'\n               }}\n               page={page}\n               onChangePage={\n                  (event, page) => {\n                     this.setState({\n                        ...this.state,\n                        page\n                     })\n                  }\n               }\n               editable={{\n                  onRowAdd: (newRow) => new Promise((resolve, reject) => {\n                     const updatedRows = [\n                        ...listAllData,\n                        newRow\n                     ];\n                     alert(`name: , surname:`);\n                     setTimeout(() => {\n                        this.setState({\n                           allData: updatedRows\n                        })\n                        resolve();\n                     }, 500);\n                     console.log(\"onRowAdd\", newRow);\n                  }),\n                  onRowDelete: selectedRow => new Promise((resolve, reject) => {\n                     const index = selectedRow.tableData.id;\n                     const updatedRows = [...listAllData];\n                     updatedRows.splice(index, 1)\n                     setTimeout(() => {\n                        this.setState({\n                           allData: updatedRows\n                        })\n                        resolve();\n                     }, 500);\n                     console.log(\"onRowDelete\", updatedRows);\n                  }),\n                  onRowUpdate: (updatedRow, oldRow) => new Promise((resolve, reject) => {\n                     const index = oldRow.tableData.id;\n                     const updatedRows = [...listAllData];\n                     updatedRows[index] = updatedRow\n                     setTimeout(() => {\n                        this.setState({\n                           allData: updatedRows\n                        })\n                        resolve();\n                     }, 500);\n                     console.log(\"onRowUpdate\", updatedRows);\n                  })\n               }}\n            />\n         </div >\n      );\n   }\n}","import axios from \"axios\";\n\n\nexport const getAllData = async ( fullName, email, subject, description, customerName, attachmentToken) => {\n   const baseUrl = \"https://staging.rahmatsaputra.my.id\"\n   try {\n   //   const config = {\n   //     headers: {\n   //       \"Authorization\": \"Bearer \" + actZendesk\n   //     },\n   //   };\n \n   //   const body = {\n   //     ticket: {\n   //       ticket_form_id: \"360003061114\" ,\n   //       subject: subject,\n   //       comment: {\n   //         body: description,\n   //         uploads: attachmentToken\n   //       },\n   //       custom_fields: \n   //         [\n   //           { id: 360036659793, value: fullName },\n   //           { id: 360036659813, value: email },\n   //           { id: 360036659793, value: customerName }\n   //         ]\n   //       ,\n   //       collaborators: [email, { name: fullName, email: email }]\n   //     }\n   //   };\n\n     const url = baseUrl + \"/v0/nutech/product\";\n     const result = await axios.get(url);\n     //   return await AxiosAdapter.post(url, body, config);\n     return result;\n\n   } catch (error) {\n     console.log('ActionGlobal.web@postTicketZendeskWidget', error.message);\n     return false;\n   }\n };\n\n//  export const getDataById = async ( fullName, email, subject, description, customerName, attachmentToken) => {\n//    try {\n//      const config = {\n//        headers: {\n//          \"Authorization\": \"Bearer \" + actZendesk\n//        },\n//      };\n \n//      const body = {\n//        ticket: {\n//          ticket_form_id: \"360003061114\" ,\n//          subject: subject,\n//          comment: {\n//            body: description,\n//            uploads: attachmentToken\n//          },\n//          custom_fields: \n//            [\n//              { id: 360036659793, value: fullName },\n//              { id: 360036659813, value: email },\n//              { id: 360036659793, value: customerName }\n//            ]\n//          ,\n//          collaborators: [email, { name: fullName, email: email }]\n//        }\n//      };\n//      const url = baseUrlZendesk + \"api/v2/tickets.json\";\n//      return await AxiosAdapter.post(url, body, config);\n//    } catch (error) {\n//      console.log('ActionGlobal.web@postTicketZendeskWidget', error.message);\n//      return false;\n//    }\n//  };\n\n//  export const updateData = async ( fullName, email, subject, description, customerName, attachmentToken) => {\n//    try {\n//      const config = {\n//        headers: {\n//          \"Authorization\": \"Bearer \" + actZendesk\n//        },\n//      };\n \n//      const body = {\n//        ticket: {\n//          ticket_form_id: \"360003061114\" ,\n//          subject: subject,\n//          comment: {\n//            body: description,\n//            uploads: attachmentToken\n//          },\n//          custom_fields: \n//            [\n//              { id: 360036659793, value: fullName },\n//              { id: 360036659813, value: email },\n//              { id: 360036659793, value: customerName }\n//            ]\n//          ,\n//          collaborators: [email, { name: fullName, email: email }]\n//        }\n//      };\n//      const url = baseUrlZendesk + \"api/v2/tickets.json\";\n//      return await AxiosAdapter.post(url, body, config);\n//    } catch (error) {\n//      console.log('ActionGlobal.web@updateData', error.message);\n//      return false;\n//    }\n//  };\n\n// export const postData = async ( fullName, email, subject, description, customerName, attachmentToken) => {\n//    try {\n//      const config = {\n//        headers: {\n//          \"Authorization\": \"Bearer \" + actZendesk\n//        },\n//      };\n \n//      const body = {\n//        ticket: {\n//          ticket_form_id: \"360003061114\" ,\n//          subject: subject,\n//          comment: {\n//            body: description,\n//            uploads: attachmentToken\n//          },\n//          custom_fields: \n//            [\n//              { id: 360036659793, value: fullName },\n//              { id: 360036659813, value: email },\n//              { id: 360036659793, value: customerName }\n//            ]\n//          ,\n//          collaborators: [email, { name: fullName, email: email }]\n//        }\n//      };\n//      const url = baseUrlZendesk + \"api/v2/tickets.json\";\n\n//      return await AxiosAdapter.post(url, body, config);\n//    } catch (error) {\n//      console.log('ActionGlobal.web@postData', error.message);\n//      return false;\n//    }\n//  };","import './App.css';\nimport CTable from './Component/CTable';\nimport React, { Component } from 'react';\nimport { getAllData } from './Helper/ActionGlobal';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      allData: false,\n    }\n  }\n\n  componentDidMount() {\n    this._handlerGetAllData();\n  }\n\n  async _handlerGetAllData() {\n    const readAllData = await getAllData();\n    this.setState({\n      listAllData: readAllData.data.data\n    });\n    console.log(\"CTable@_handlerGetAllData\", readAllData.data.data);\n  }\n\n  render() {\n    const { listAllData } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h2> PT Nutech Programing Test Rahmat Saputra</h2>\n        <CTable\n          listAllData={listAllData}\n        />\n      </div>\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}