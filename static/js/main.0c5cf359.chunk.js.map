{"version":3,"sources":["Helper/ActionGlobal.js","Component/CTable/index.js","App.js","reportWebVitals.js","index.js"],"names":["getAllData","fullName","email","subject","description","customerName","attachmentToken","a","baseUrl","axios","get","result","console","log","message","CTable","props","state","page","this","listAllData","title","data","columns","field","editable","options","search","paging","filtering","exportButton","actionsColumnIndex","addRowPosition","onChangePage","event","setState","onRowAdd","newRow","Promise","resolve","reject","updateRows","setTimeout","allData","onRowDelete","selectedRow","index","tableData","id","splice","Component","App","_handlerGetAllData","readAllData","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mVAGaA,EAAU,uCAAG,WAAQC,EAAUC,EAAOC,EAASC,EAAaC,EAAcC,GAA7D,eAAAC,EAAA,4DACP,uCADO,SA4BTC,6CA5BS,SA6BAC,IAAMC,IADfF,8CA5BS,cA6BfG,EA7Be,yBA8BdA,GA9Bc,uCAiCrBC,QAAQC,IAAI,2CAA4C,KAAMC,SAjCzC,mBAkCd,GAlCc,yDAAH,gE,QCCFC,E,kDAClB,WAAYC,GAAQ,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACVC,KAAM,GAJO,E,0CAQnB,WAAU,IAAD,OAsBEA,EAASC,KAAKF,MAAdC,KACAE,EAAgBD,KAAKH,MAArBI,YAER,OACG,8BACG,cAAC,IAAD,CACGC,MAAM,iBACNC,KAAMF,EACNG,QA5BO,CACb,CACGF,MAAO,KACPG,MAAO,KACPC,UAAU,GAEb,CACGJ,MAAO,SACPG,MAAO,SACPC,UAAU,GAEb,CACGJ,MAAO,QACPG,MAAO,SAEV,CACGH,MAAO,OACPG,MAAO,SAYJE,QAAS,CACNC,QAAQ,EACRC,QAAQ,EACRC,WAAW,EACXC,cAAc,EACdC,oBAAqB,EACrBC,eAAgB,SAEnBd,KAAMA,EACNe,aACG,SAACC,EAAOhB,GACL,EAAKiB,SAAL,2BACM,EAAKlB,OADX,IAEGC,WAGZO,SAAU,CACPW,SAAU,SAACC,GAAD,OAAY,IAAIC,SAAQ,SAACC,EAASC,GACzC,IAAMC,EAAU,sBACVrB,GADU,CAEbiB,IAEHK,YAAW,WACR,EAAKP,SAAS,CACXQ,QAASF,IAEZF,MACA,KACH3B,QAAQC,IAAI,WAAYwB,OAE3BO,YAAa,SAAAC,GAAW,OAAI,IAAIP,SAAQ,SAACC,EAASC,GAC/C,IAAMM,EAAQD,EAAYE,UAAUC,GAC9BP,EAAU,YACVrB,GAENqB,EAAWQ,OAAOH,EAAO,GACzBJ,YAAW,WACR,EAAKP,SAAS,CACXQ,QAASF,IAEZF,MACA,KACH3B,QAAQC,IAAI,cAAe4B,gB,GAlFTS,aCCfC,E,kDACnB,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACX0B,SAAS,GAJM,E,qDAQnB,WACExB,KAAKiC,uB,uEAGP,4BAAA7C,EAAA,sEAC4BP,IAD5B,OACQqD,EADR,OAEElC,KAAKgB,SAAS,CACZf,YAAaiC,EAAY/B,OAE3BV,QAAQC,IAAI,4BAA6BwC,EAAY/B,MALvD,gD,0EAQA,WACE,IAAQF,EAAgBD,KAAKF,MAArBG,YAER,OACE,sBAAKkC,UAAU,MAAf,UACE,4DACA,cAAC,EAAD,CACElC,YAAaA,W,GA5BU8B,aCOlBK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0c5cf359.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nexport const getAllData = async ( fullName, email, subject, description, customerName, attachmentToken) => {\n   const baseUrl = \"https://jsonplaceholder.typicode.com\"\n   try {\n   //   const config = {\n   //     headers: {\n   //       \"Authorization\": \"Bearer \" + actZendesk\n   //     },\n   //   };\n \n   //   const body = {\n   //     ticket: {\n   //       ticket_form_id: \"360003061114\" ,\n   //       subject: subject,\n   //       comment: {\n   //         body: description,\n   //         uploads: attachmentToken\n   //       },\n   //       custom_fields: \n   //         [\n   //           { id: 360036659793, value: fullName },\n   //           { id: 360036659813, value: email },\n   //           { id: 360036659793, value: customerName }\n   //         ]\n   //       ,\n   //       collaborators: [email, { name: fullName, email: email }]\n   //     }\n   //   };\n\n     const url = baseUrl + \"/posts\";\n     const result = await axios.get(url);\n     return result;\n   //   return await AxiosAdapter.post(url, body, config);\n   } catch (error) {\n     console.log('ActionGlobal.web@postTicketZendeskWidget', error.message);\n     return false;\n   }\n };\n\n//  export const getDataById = async ( fullName, email, subject, description, customerName, attachmentToken) => {\n//    try {\n//      const config = {\n//        headers: {\n//          \"Authorization\": \"Bearer \" + actZendesk\n//        },\n//      };\n \n//      const body = {\n//        ticket: {\n//          ticket_form_id: \"360003061114\" ,\n//          subject: subject,\n//          comment: {\n//            body: description,\n//            uploads: attachmentToken\n//          },\n//          custom_fields: \n//            [\n//              { id: 360036659793, value: fullName },\n//              { id: 360036659813, value: email },\n//              { id: 360036659793, value: customerName }\n//            ]\n//          ,\n//          collaborators: [email, { name: fullName, email: email }]\n//        }\n//      };\n//      const url = baseUrlZendesk + \"api/v2/tickets.json\";\n//      return await AxiosAdapter.post(url, body, config);\n//    } catch (error) {\n//      console.log('ActionGlobal.web@postTicketZendeskWidget', error.message);\n//      return false;\n//    }\n//  };\n\n//  export const updateData = async ( fullName, email, subject, description, customerName, attachmentToken) => {\n//    try {\n//      const config = {\n//        headers: {\n//          \"Authorization\": \"Bearer \" + actZendesk\n//        },\n//      };\n \n//      const body = {\n//        ticket: {\n//          ticket_form_id: \"360003061114\" ,\n//          subject: subject,\n//          comment: {\n//            body: description,\n//            uploads: attachmentToken\n//          },\n//          custom_fields: \n//            [\n//              { id: 360036659793, value: fullName },\n//              { id: 360036659813, value: email },\n//              { id: 360036659793, value: customerName }\n//            ]\n//          ,\n//          collaborators: [email, { name: fullName, email: email }]\n//        }\n//      };\n//      const url = baseUrlZendesk + \"api/v2/tickets.json\";\n//      return await AxiosAdapter.post(url, body, config);\n//    } catch (error) {\n//      console.log('ActionGlobal.web@updateData', error.message);\n//      return false;\n//    }\n//  };\n\n// export const postData = async ( fullName, email, subject, description, customerName, attachmentToken) => {\n//    try {\n//      const config = {\n//        headers: {\n//          \"Authorization\": \"Bearer \" + actZendesk\n//        },\n//      };\n \n//      const body = {\n//        ticket: {\n//          ticket_form_id: \"360003061114\" ,\n//          subject: subject,\n//          comment: {\n//            body: description,\n//            uploads: attachmentToken\n//          },\n//          custom_fields: \n//            [\n//              { id: 360036659793, value: fullName },\n//              { id: 360036659813, value: email },\n//              { id: 360036659793, value: customerName }\n//            ]\n//          ,\n//          collaborators: [email, { name: fullName, email: email }]\n//        }\n//      };\n//      const url = baseUrlZendesk + \"api/v2/tickets.json\";\n\n//      return await AxiosAdapter.post(url, body, config);\n//    } catch (error) {\n//      console.log('ActionGlobal.web@postData', error.message);\n//      return false;\n//    }\n//  };","import MaterialTable from 'material-table';\nimport React, { Component } from 'react';\nimport { getAllData } from '../../Helper/ActionGlobal';\n\nexport default class CTable extends Component {\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         page: 0,\n      }\n   }\n\n   render() {\n\n      const columns = [\n         {\n            title: 'ID',\n            field: 'id',\n            editable: false\n         },\n         {\n            title: 'UserID',\n            field: 'userId',\n            editable: false\n         },\n         {\n            title: 'Title',\n            field: 'title'\n         },\n         {\n            title: 'Body',\n            field: 'body'\n         }\n      ];\n      const { page } = this.state;\n      const { listAllData } = this.props;\n\n      return (\n         <div>\n            <MaterialTable\n               title=\"Material Table\"\n               data={listAllData}\n               columns={columns}\n               options={{\n                  search: true,\n                  paging: true,\n                  filtering: false,\n                  exportButton: true,\n                  actionsColumnIndex: -1,\n                  addRowPosition: 'first'\n               }}\n               page={page}\n               onChangePage={\n                  (event, page) => {\n                     this.setState({\n                        ...this.state,\n                        page\n                     })\n                  }}\n            editable={{\n               onRowAdd: (newRow) => new Promise((resolve, reject) => {\n                  const updateRows = [\n                     ...listAllData,\n                     newRow\n                  ];\n                  setTimeout(() => {\n                     this.setState({\n                        allData: updateRows\n                     })\n                     resolve();\n                  }, 500);\n                  console.log(\"onRowAdd\", newRow);\n               }),\n               onRowDelete: selectedRow => new Promise((resolve, reject) => {\n                  const index = selectedRow.tableData.id;\n                  const updateRows = [\n                     ...listAllData\n                  ];\n                  updateRows.splice(index, 1)\n                  setTimeout(() => {\n                     this.setState({\n                        allData: updateRows\n                     })\n                     resolve();\n                  }, 500);\n                  console.log(\"onRowDelete\", updateRows);\n               })\n            }}\n            />\n         </div >\n      );\n   }\n}","import './App.css';\nimport CTable from './Component/CTable';\nimport React, { Component } from 'react';\nimport { getAllData } from './Helper/ActionGlobal';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      allData: false,\n    }\n  }\n\n  componentDidMount() {\n    this._handlerGetAllData();\n  }\n\n  async _handlerGetAllData() {\n    const readAllData = await getAllData();\n    this.setState({\n      listAllData: readAllData.data\n    });\n    console.log(\"CTable@_handlerGetAllData\", readAllData.data);\n  }\n\n  render() {\n    const { listAllData } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h2> PT Nutech Programing Test</h2>\n        <CTable\n          listAllData={listAllData}\n        />\n      </div>\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}