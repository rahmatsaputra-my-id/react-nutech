{"version":3,"sources":["Component/CTable/index.js","Helper/ActionGlobal.js","App.js","reportWebVitals.js","index.js"],"names":["CTable","props","state","page","columns","title","field","render","row","src","url_to_image","alt","style","width","height","marginLeft","this","listAllData","data","options","search","paging","filtering","actionsColumnIndex","addRowPosition","onChangePage","event","setState","editable","onRowAdd","newRow","Promise","resolve","reject","updatedRows","alert","setTimeout","allData","console","log","onRowDelete","selectedRow","index","tableData","id","splice","onRowUpdate","updatedRow","oldRow","Component","getAllData","fullName","email","subject","description","customerName","attachmentToken","a","baseUrl","axios","get","result","message","App","_handlerGetAllData","readAllData","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.437c8b23.chunk.js","sourcesContent":["import MaterialTable from 'material-table';\nimport React, { Component } from 'react';\n\nexport default class CTable extends Component {\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         page: 0,\n      }\n   }\n\n   render() {\n\n      const columns = [\n         {\n            title: 'Product Image',\n            field: 'url_to_image',\n            render: (row) =>\n               <img\n                  src={row.url_to_image}\n                  alt=\"\"\n                  style={{\n                     width: 40,\n                     height: 40,\n                     marginLeft: 8\n                  }}\n               />\n         },\n         {\n            title: 'Product Name',\n            field: 'product_name'\n         },\n         {\n            title: 'Purchase Price',\n            field: 'purchase_price'\n         },\n         {\n            title: 'Selling Price',\n            field: 'selling_price'\n         },\n         {\n            title: 'Stock',\n            field: 'stock'\n         }\n      ];\n      const { page } = this.state;\n      const { listAllData } = this.props;\n\n      return (\n         <div>\n            <MaterialTable\n               title=\"Material Table\"\n               data={listAllData}\n               columns={columns}\n               options={{\n                  search: true,\n                  paging: true,\n                  filtering: false,\n                  actionsColumnIndex: -1,\n                  addRowPosition: 'first'\n               }}\n               page={page}\n               onChangePage={\n                  (event, page) => {\n                     this.setState({\n                        ...this.state,\n                        page\n                     })\n                  }\n               }\n               editable={{\n                  onRowAdd: (newRow) => new Promise((resolve, reject) => {\n                     const updatedRows = [\n                        ...listAllData,\n                        newRow\n                     ];\n                     alert(`name: , surname:`);\n                     setTimeout(() => {\n                        this.setState({\n                           allData: updatedRows\n                        })\n                        resolve();\n                     }, 500);\n                     console.log(\"onRowAdd\", newRow);\n                  }),\n                  onRowDelete: selectedRow => new Promise((resolve, reject) => {\n                     const index = selectedRow.tableData.id;\n                     const updatedRows = [...listAllData];\n                     updatedRows.splice(index, 1)\n                     setTimeout(() => {\n                        this.setState({\n                           allData: updatedRows\n                        })\n                        resolve();\n                     }, 500);\n                     console.log(\"onRowDelete\", updatedRows);\n                  }),\n                  onRowUpdate: (updatedRow, oldRow) => new Promise((resolve, reject) => {\n                     const index = oldRow.tableData.id;\n                     const updatedRows = [...listAllData];\n                     updatedRows[index] = updatedRow\n                     setTimeout(() => {\n                        this.setState({\n                           allData: updatedRows\n                        })\n                        resolve();\n                     }, 500);\n                     console.log(\"onRowUpdate\", updatedRows);\n                  })\n               }}\n            />\n         </div >\n      );\n   }\n}","import axios from \"axios\";\n\n\nexport const getAllData = async (fullName, email, subject, description, customerName, attachmentToken) => {\n   const baseUrl = \"https://staging.rahmatsaputra.my.id\"\n   try {\n      //   const config = {\n      //     headers: {\n      //       \"Authorization\": \"Bearer \" + actZendesk\n      //     },\n      //   };\n\n      //   const body = {\n      //     ticket: {\n      //       ticket_form_id: \"360003061114\" ,\n      //       subject: subject,\n      //       comment: {\n      //         body: description,\n      //         uploads: attachmentToken\n      //       },\n      //       custom_fields: \n      //         [\n      //           { id: 360036659793, value: fullName },\n      //           { id: 360036659813, value: email },\n      //           { id: 360036659793, value: customerName }\n      //         ]\n      //       ,\n      //       collaborators: [email, { name: fullName, email: email }]\n      //     }\n      //   };\n\n      const url = baseUrl + \"/v0/nutech/product\";\n      const result = await axios.get(url);\n      //   return await AxiosAdapter.post(url, body, config);\n      return result;\n\n   } catch (error) {\n      console.log('ActionGlobal.web@postTicketZendeskWidget', error.message);\n      return false;\n   }\n};\n\n//  export const getDataById = async ( fullName, email, subject, description, customerName, attachmentToken) => {\n//    try {\n//      const config = {\n//        headers: {\n//          \"Authorization\": \"Bearer \" + actZendesk\n//        },\n//      };\n\n//      const body = {\n//        ticket: {\n//          ticket_form_id: \"360003061114\" ,\n//          subject: subject,\n//          comment: {\n//            body: description,\n//            uploads: attachmentToken\n//          },\n//          custom_fields: \n//            [\n//              { id: 360036659793, value: fullName },\n//              { id: 360036659813, value: email },\n//              { id: 360036659793, value: customerName }\n//            ]\n//          ,\n//          collaborators: [email, { name: fullName, email: email }]\n//        }\n//      };\n//      const url = baseUrlZendesk + \"api/v2/tickets.json\";\n//      return await AxiosAdapter.post(url, body, config);\n//    } catch (error) {\n//      console.log('ActionGlobal.web@postTicketZendeskWidget', error.message);\n//      return false;\n//    }\n//  };\n\n//  export const updateData = async ( fullName, email, subject, description, customerName, attachmentToken) => {\n//    try {\n//      const config = {\n//        headers: {\n//          \"Authorization\": \"Bearer \" + actZendesk\n//        },\n//      };\n\n//      const body = {\n//        ticket: {\n//          ticket_form_id: \"360003061114\" ,\n//          subject: subject,\n//          comment: {\n//            body: description,\n//            uploads: attachmentToken\n//          },\n//          custom_fields: \n//            [\n//              { id: 360036659793, value: fullName },\n//              { id: 360036659813, value: email },\n//              { id: 360036659793, value: customerName }\n//            ]\n//          ,\n//          collaborators: [email, { name: fullName, email: email }]\n//        }\n//      };\n//      const url = baseUrlZendesk + \"api/v2/tickets.json\";\n//      return await AxiosAdapter.post(url, body, config);\n//    } catch (error) {\n//      console.log('ActionGlobal.web@updateData', error.message);\n//      return false;\n//    }\n//  };\n\n// export const postData = async ( fullName, email, subject, description, customerName, attachmentToken) => {\n//    try {\n//      const config = {\n//        headers: {\n//          \"Authorization\": \"Bearer \" + actZendesk\n//        },\n//      };\n\n//      const body = {\n//        ticket: {\n//          ticket_form_id: \"360003061114\" ,\n//          subject: subject,\n//          comment: {\n//            body: description,\n//            uploads: attachmentToken\n//          },\n//          custom_fields: \n//            [\n//              { id: 360036659793, value: fullName },\n//              { id: 360036659813, value: email },\n//              { id: 360036659793, value: customerName }\n//            ]\n//          ,\n//          collaborators: [email, { name: fullName, email: email }]\n//        }\n//      };\n//      const url = baseUrlZendesk + \"api/v2/tickets.json\";\n\n//      return await AxiosAdapter.post(url, body, config);\n//    } catch (error) {\n//      console.log('ActionGlobal.web@postData', error.message);\n//      return false;\n//    }\n//  };","import './App.css';\nimport CTable from './Component/CTable';\nimport React, { Component } from 'react';\nimport { getAllData } from './Helper/ActionGlobal';\n\nexport default class App extends Component {\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         allData: false,\n      }\n   }\n\n   componentDidMount() {\n      this._handlerGetAllData();\n   }\n\n   async _handlerGetAllData() {\n      const readAllData = await getAllData();\n\n      if (readAllData) {\n         this.setState({\n            listAllData: readAllData.data.data\n         });\n         console.log(\"CTable@_handlerGetAllData\", readAllData.data.data);\n      }\n   }\n\n   render() {\n      const { listAllData } = this.state;\n\n      return (\n         <div className=\"App\">\n            <h2> PT Nutech Programing Test Rahmat Saputra</h2>\n            <CTable\n               listAllData={listAllData}\n            />\n         </div>\n      );\n   }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}